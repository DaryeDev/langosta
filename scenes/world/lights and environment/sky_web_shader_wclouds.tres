[gd_resource type="Shader" format=3 uid="uid://bhe8im5rm1ml5"]

[resource]
code = "shader_type sky;
render_mode use_debanding;

uniform vec4 sky_day_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_day_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform vec4 sky_night_top_color : source_color = vec4(0.1, 0.1, 0.2, 1.0);
uniform vec4 sky_night_horizon_color : source_color = vec4(0.2, 0.2, 0.3, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_day_energy = 1.0; // In Lux.
uniform float sky_night_energy = 0.2; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;
uniform float exposure : hint_range(0, 128) = 1.0;

uniform sampler2D cloud_texture;
uniform sampler2D cloud_texture2;
uniform vec2 cloud_direction;
uniform vec2 cloud_direction2;
uniform vec2 cloud_scale;
uniform float cloud_distance;
uniform float cloud_speed;
uniform float cloud_speed2;

const float day_duration = 180.0; // 3 minutes for day
const float night_duration = 120.0; // 2 minutes for night
const float cycle_time = day_duration + night_duration;

void sky() {
    float time_of_day = mod(TIME, cycle_time);
    float day_night_blend;

    if (time_of_day < day_duration) {
        day_night_blend = time_of_day / day_duration; // Blends from night to day
    } else {
        day_night_blend = (time_of_day - day_duration) / night_duration; // Blends from day to night
        day_night_blend = 1.0 - day_night_blend; // Invert blend for night
    }

    vec4 sky_top_color = mix(sky_night_top_color, sky_day_top_color, day_night_blend);
    vec4 sky_horizon_color = mix(sky_night_horizon_color, sky_day_horizon_color, day_night_blend);
    float sky_energy = mix(sky_night_energy, sky_day_energy, day_night_blend);

    float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
    float c = (1.0 - v_angle / (PI * 0.5));
    vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
    sky *= sky_energy;

    // Sunlight and moonlight blending based on time of day
    vec3 light_color = mix(LIGHT1_COLOR.rgb, LIGHT0_COLOR.rgb, day_night_blend);
    float light_energy = mix(LIGHT1_ENERGY, LIGHT0_ENERGY, day_night_blend);

    if (LIGHT0_ENABLED) {
        float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
        if (sun_angle < LIGHT0_SIZE) {
            sky = light_color * light_energy;
        } else if (sun_angle < sun_angle_max) {
            float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
            sky = mix(light_color * light_energy, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
        }
    }

    // Handling other lights if needed (LIGHT1, LIGHT2, etc.)
    // Adjust the code similarly for additional light sources

    vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
    sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

    c = (v_angle - (PI * 0.5)) / (PI * 0.5);
    vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
    ground *= ground_energy;

    vec2 sky_uv = EYEDIR.xz / EYEDIR.y;
    vec3 clouds = texture(cloud_texture, (sky_uv * cloud_scale) + (TIME * cloud_direction * cloud_speed)).rgb - texture(cloud_texture2, (sky_uv * cloud_scale) + (TIME * cloud_direction2 * cloud_speed2)).rgb;
    clouds = clouds - smoothstep(0.0, EYEDIR.y, cloud_distance);
    clouds = clamp(clouds, 0.0, 1.0);
    sky += clouds;

    COLOR = mix(ground, sky, step(0.0, EYEDIR.y)) * exposure;
}
"
